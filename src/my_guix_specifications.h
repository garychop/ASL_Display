/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.4.2.9                                               */
/*  Date (dd.mm.yyyy): 16.10.2019   Time (hh:mm): 12:56                        */
/*******************************************************************************/


#ifndef _MY_GUIX_SPECIFICATIONS_H_
#define _MY_GUIX_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define MAIN_USER_SCREEN_ID 1
#define RIGHT_PAD_OFF_ID 2
#define PROFILE_NEXT_SMALL_PROMPT_ID 3
#define PROFILE_NEXT_LARGE_PROMPT_ID 4
#define POWER_SMALL_PROMPT_ID 5
#define POWER_LARGE_PROMPT_ID 6
#define FUNCTION_NEXT_SMALL_PROMPT_ID 7
#define FUNCITON_NET_LARGE_PROMPT_ID 8
#define CENTER_PAD_ON_ID 9
#define BLUETOOTH_LARGE_PROMPT_ID 10
#define BLUETOOTH_SMALL_PROMPT_ID 11
#define ID_EDIT_SCREEN_R_BTN 12
#define ID_BTN_LeftPad 13
#define ID_BTN_rightPad 14
#define ID_BTN_CenterPad 15
#define ID_BTN_Power 16
#define ID_BTN_DateTime 17
#define ID_BTN_Sound 18
#define ID_INPUT_FIELD 19
#define IDB_BACKSPACE 20
#define ID_DATETIME_SCREEN_R_BTN 21
#define ID_DATETIME_SAVE 22
#define ID_DATETIME_LIST 23
#define ID_DATETIME_PGUP_BTN 24
#define ID_DATETIME_PGDN_BTN 25
#define ID_SETTING_FUNCTION_BTN 26


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_CHAR *buffer;
    UINT buffer_size;
} GX_SINGLE_LINE_TEXT_INPUT_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct MAIN_USER_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT Main_User_Screen_RightPadOFF;
    GX_PIXELMAP_PROMPT Main_User_Screen_ProfileNextSmallPrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_ProfileNextLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_PowerSmallPrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_PowerLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_FunctionNextSmallPrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_FunctionNextLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_CenterPadON;
    GX_PIXELMAP_PROMPT Main_User_Screen_BluetoothLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_BluetoothSmallPrompt;
} MAIN_USER_SCREEN_CONTROL_BLOCK;

typedef struct PRIMARYTEMPLATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
} PRIMARYTEMPLATE_CONTROL_BLOCK;

typedef struct EDIT_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON edit_screen_edit_screen_r_btn;
    GX_PROMPT edit_screen_EditPrompt;
    GX_TEXT_BUTTON edit_screen_btn_LeftPad;
    GX_TEXT_BUTTON edit_screen_btn_rightPad;
    GX_TEXT_BUTTON edit_screen_btn_CenterPad;
    GX_TEXT_BUTTON edit_screen_btn_Power;
    GX_TEXT_BUTTON edit_screen_btn_DateTime;
    GX_TEXT_BUTTON edit_screen_btn_Sound;
} EDIT_SCREEN_CONTROL_BLOCK;

typedef struct KEYBOARD_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_SINGLE_LINE_TEXT_INPUT keyboard_screen_keyboard_input_field;
    GX_PIXELMAP_BUTTON keyboard_screen_backspace_btn;
    GX_PROMPT keyboard_screen_KeyboardPrompt;
} KEYBOARD_SCREEN_CONTROL_BLOCK;

typedef struct DATETIME_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON DateTime_screen_DateTime_screen_r_btn;
    GX_TEXT_BUTTON DateTime_screen_DateTime_save;
    GX_VERTICAL_LIST DateTime_screen_DateTime_list;
    GX_PROMPT DateTime_screen_DateTime_list_pos0;
    GX_PROMPT DateTime_screen_DateTime_list_pos1;
    GX_PROMPT DateTime_screen_DateTime_list_pos2;
    GX_PROMPT DateTime_screen_DateTime_list_pos3;
    GX_PROMPT DateTime_screen_DateTimePrompt;
    GX_PROMPT DateTime_screen_DateTime_prmpt_pos0;
    GX_PROMPT DateTime_screen_DateTime_prmpt_pos1;
    GX_PROMPT DateTime_screen_DateTime_prmpt_pos2;
    GX_PROMPT DateTime_screen_DateTime_prmpt_pos3;
    GX_PIXELMAP_BUTTON DateTime_screen_DateTime_PgUp_button;
    GX_PIXELMAP_BUTTON DateTime_screen_DateTime_PgDn_button;
} DATETIME_SCREEN_CONTROL_BLOCK;

typedef struct INFORMATION_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT information_screen_TimePrmpt;
    GX_WINDOW information_screen_LeftPadW;
    GX_PROMPT information_screen_LeftPadPrompt1;
    GX_PROMPT information_screen_LeftPadPrompt1_1;
    GX_WINDOW information_screen_LeftPadW_1;
    GX_PROMPT information_screen_LeftPadPrompt1_2;
    GX_PROMPT information_screen_LeftPadPrompt1_3;
    GX_WINDOW information_screen_LeftPadW_2;
    GX_PROMPT information_screen_LeftPadPrompt1_4;
    GX_PROMPT information_screen_LeftPadPrompt1_5;
    GX_WINDOW information_screen_LeftPadW_3;
    GX_PROMPT information_screen_LeftPadPrompt1_6;
    GX_PROMPT information_screen_LeftPadPrompt1_7;
    GX_PROMPT information_screen_LeftPadPrompt1_8;
    GX_TEXT_BUTTON information_screen_SettingFunctionButton;
    GX_PROMPT information_screen_TimePrmpt_1;
    GX_PROMPT information_screen_TimePrmpt_2;
    GX_PROMPT information_screen_PropVersionPrompt;
    GX_PROMPT information_screen_HhpVersionPrompt;
} INFORMATION_SCREEN_CONTROL_BLOCK;

typedef struct INIT_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT init_screen_InitPrmpt2;
    GX_PROMPT init_screen_InitPrmpt3;
    GX_WINDOW init_screen_window;
} INIT_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern MAIN_USER_SCREEN_CONTROL_BLOCK Main_User_Screen;
extern PRIMARYTEMPLATE_CONTROL_BLOCK PrimaryTemplate;
extern EDIT_SCREEN_CONTROL_BLOCK edit_screen;
extern KEYBOARD_SCREEN_CONTROL_BLOCK keyboard_screen;
extern DATETIME_SCREEN_CONTROL_BLOCK DateTime_screen;
extern INFORMATION_SCREEN_CONTROL_BLOCK information_screen;
extern INIT_SCREEN_CONTROL_BLOCK init_screen;
#endif

/* Prototype Synergy display driver specific functions                         */

UINT _gx_synergy_display_driver_setup(GX_DISPLAY *display);
#if defined(GX_TARGET_WIN32) || defined(GX_TARGET_LINUX)
UINT win32_synergy_graphics_driver_setup_565rgb(GX_DISPLAY *display);
#else
VOID _gx_display_driver_565rgb_setup(GX_DISPLAY *display, VOID *aux_data,
                           VOID (*toggle_function)(struct GX_CANVAS_STRUCT *canvas,
                           GX_RECTANGLE *dirty_area));
VOID _gx_dave2d_horizontal_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT ypos);
VOID _gx_dave2d_vertical_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT ystart, INT yend, INT xpos);
VOID _gx_dave2d_pixel_write_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR color);
VOID _gx_dave2d_pixel_blend_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR fcolor, GX_UBYTE alpha);
VOID _gx_dave2d_pixelmap_rotate_16bpp(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap, INT angle, INT rot_cx, INT rot_cy);
VOID _gx_dave2d_drawing_initiate(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_drawing_complete(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_horizontal_line(GX_DRAW_CONTEXT *context,
                             INT xstart, INT xend, INT ypos, INT width, GX_COLOR color);
VOID _gx_dave2d_vertical_line(GX_DRAW_CONTEXT *context,
                             INT ystart, INT yend, INT xpos, INT width, GX_COLOR color);
VOID _gx_dave2d_canvas_copy(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_canvas_blend(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_simple_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_simple_wide_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart,
                                INT xend, INT yend);
VOID _gx_dave2d_aliased_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_aliased_wide_line(GX_DRAW_CONTEXT *context, INT xstart,
                                        INT ystart, INT xend, INT yend);
VOID _gx_dave2d_pixelmap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_horizontal_pixelmap_line_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, INT xstart, INT xend, INT y, GX_FILL_PIXELMAP_INFO *info);
VOID _gx_dave2d_pixelmap_blend(GX_DRAW_CONTEXT *context, INT xpos, INT ypos,
                                      GX_PIXELMAP *pixelmap, GX_UBYTE alpha);
VOID _gx_dave2d_polygon_draw(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_polygon_fill(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_block_move(GX_DRAW_CONTEXT *context,
                          GX_RECTANGLE *block, INT xshift, INT yshift);
VOID _gx_dave2d_alphamap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_compressed_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_buffer_toggle(GX_CANVAS *canvas, GX_RECTANGLE *dirty);
#if defined(GX_ARC_DRAWING_SUPPORT)
VOID _gx_dave2d_aliased_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_pie_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
#endif
VOID _gx_synergy_jpeg_draw (GX_DRAW_CONTEXT *p_context, INT x, INT y, GX_PIXELMAP *p_pixelmap);

#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT Main_User_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Main_User_Screen_draw_function(GX_WINDOW *widget);
UINT Template_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT EditScreenEventHandler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT keyboard_frame_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT input_field_event_process(GX_SINGLE_LINE_TEXT_INPUT *widget, GX_EVENT *event_ptr);
UINT DateTimeScreenEventHandler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT InformationScreenEventHandler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT InitScreenEventHandler(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_input_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), USHORT language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
