/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.4.0.0                                               */
/*  Date (dd.mm.yyyy): 10. 7.2024   Time (hh:mm): 11:59                        */
/*******************************************************************************/


#ifndef _ASL_HHP_DISPLAY_GUIX_SPECIFICATIONS_H_
#define _ASL_HHP_DISPLAY_GUIX_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ION_AUDITORY_SETTINGS_SCREEN_ID 1
#define AUDITORY_VOLUME_PROMPT_ID 2
#define AUDITORY_VOLUMEDOWN_BTN 3
#define AUDITORY_VOLUMEUP_BTN 4
#define OK_BTN_ID 5
#define PAD_CLICKS_PROMPT_ID 6
#define PAD_CLICKS_TOGGLE_BTN_ID 7
#define Tone_PROMPT_ID 8
#define TONE_TOGGLE_BTN_ID 9
#define ENHANCED_PROMPT_ID 10
#define VOICE_TOGGLE_BTN_ID 11
#define ION_DIAG_4QUAD_SCREEN_ID 12
#define INSTRUCT_PROMPT_ID 13
#define MODE_PORT_BUTTON 14
#define Mode_PORT_PROMPT_DIAG_ID 15
#define USER_PORT_BUTTON 16
#define USER_PORT_PROMPT_DIAG_ID 17
#define ION_SNP_CAL_SCREEN_ID 18
#define PLUS_BTN_ID 19
#define MINUS_BTN_ID 20
#define SNP_VALUE_PROMPT_ID 21
#define SNP_CAL_SLIDER_ID 22
#define SNP_CAL_VALUE_PROMPT 23
#define SNP_HARD_PUFF_ICON 24
#define SNP_HARD_SIP_ICON 25
#define SNP_SOFT_PUFF_ICON 26
#define SNP_CALIBRATION_PROMPT_ID 27
#define ION_HEADARRAY_DIAG_SCREEN 28
#define CENTER_PAD_DIGITAL_BTN_ID 29
#define LEFT_PAD_DIGITAL_BTN_ID 30
#define RIGHT_PAD_DIGITAL_BTN_ID 31
#define CENTER_PAD_OFF_BTN_ID 32
#define LEFT_PAD_OFF_BTN_ID 33
#define RIGHT_PAD_OFF_BTN_ID 34
#define ION_PAD_DIRECTION_SCREEN_ID 35
#define CENTER_PAD_BTN_ID 36
#define LEFT_PAD_BTN_ID 37
#define RIGHT_PAD_BTN_ID 38
#define SETTING_PROMPT_ID 39
#define REVERSE_PAD_BTN_ID 40
#define ION_SIPNPUFF_SETTINGS_SCREEN_ID 41
#define BLUETOOTH_DEVICE_LIST_BOX_ID 42
#define ION_DRIVE_CONTROL_MAIN_SCREEN_ID 43
#define ION_DRIVER_SELECT_SCREEN_ID 44
#define ION_MAIN_SETTINGS_SCREEN_ID 45
#define ION_LIST_BOX_ID 46
#define ION_BT_SETUP_SCREEN_ID 47
#define COLOR_BTN_ID 48
#define BT_PAIRING_BTN_ID 49
#define TYPE_BTN_ID 50
#define ION_BT_ACTIVE_SCREEN_ID 51
#define ACTIVE_DEVICE_NAME_ID 52
#define ACTIVE_STATUS_PROMPT_ID 53
#define ION_BT_DEVICE_SELECT_SCREEN_ID 54
#define BT_SUBMENU_CHANGED_ID 55
#define SNP_CALIBRATION_SCREEN_ID 56
#define ERROR_SCREEN_ID 57
#define CYCLE_POWER_PROMPT_ID 58
#define PAD_ERROR_ID 59
#define FAULTY_PAD_PROMPT_ID 60
#define LEFT_PAD_ERROR_ICON_ID 61
#define RIGHT_PAD_ERROR_ICON_ID 62
#define CENTER_PAD_ERROR_ICON 63
#define ACTIVE_PROMPT_ID 64
#define PROPORTIONAL_PROMPT_ID 65
#define ACTIVE_TOGGLE_BTN_ID 66
#define PROPORTIONAL_TOGGLE_BTN_ID 67
#define ATTENDANT_SCREEN_ID 68
#define ATTENDANT_DRIVER_ID 69
#define RAW_POSITION_PROMPT_ID 70
#define DRIVE_DEMAND_PROMPT_ID 71
#define DISTANCE_PROMPT_ID 72
#define OUTPUT_DEMAND_PROMPET_ID 73
#define STOP_BUTTON_ID 74
#define HA_POWEROFF_BTN_ID 75
#define HA_POWERON_BTN_ID 76
#define FEATURE_LIST_BOX_ID 77
#define PERFORMANCE_SELECTION_SCREEN_ID 78
#define GOTO_VEER_ADJUST_BTN_ID 79
#define ATTENDANT_SETTING_BTN_ID 80
#define GOTO_DIAGNOSTICS_BTN_ID 81
#define GOTO_RESET_SCREEN_BTN_ID 82
#define HEAD_ARRAY_VERSION_PROMPT_ID 83
#define DISPLAY_VERSION_PROMPT_ID 84
#define RIGHT_PAD_PERCENTAGE_BTN_ID 85
#define PROMPT_FOR_EACH_PAD 86
#define PROMPT_SET_MINIMUM_SPEED 87
#define CENTER_PAD_PERCENTAGE_BTN_ID 88
#define LEFT_PAD_PERCENTAGE_BTN_ID 89
#define FEATURE_BTN_ID 90
#define USER_SETTINGS_BTN_ID 91
#define PERF_ATTEND_BTN_ID 92
#define RESET_SCREEN_ID 93
#define CONTINUE_BTN_ID 94
#define PROMPT1_ID 95
#define PROMPT2_ID 96
#define PROMPT3_ID 97
#define PROMPT4_ID 98
#define PROMPT_ID 99
#define UP_ARROW_BTN_ID 100
#define DOWN_ARROW_BTN_ID 101
#define LONG_PRESS_BUTTON_ID 102
#define OON_OK_BTN_ID 103
#define GOTO_BT_SUBMENU_ID 104
#define VEER_ADJUST_SCREEN_ID 105
#define VEER_SLIDER_ID 106
#define SLIDE_VALUE_BUTTON 107
#define OON_SCREEN_ID 108
#define CENTER_PAD_PROP_BTN_ID 109
#define LEFT_PAD_PROP_BTN_ID 110
#define RIGHT_PAD_PROP_BTN_ID 111
#define LEFT_PAD_RAW_VALUE_PROMPT 112
#define RIGHT_PAD_RAW_VALUE_PROMPT 113
#define CENTER_PAD_RAW_VALUE_PROMPT 114
#define LEFT_PAD_ADJUSTED_PROMPT 115
#define RIGHT_PAD_ADJUSTED_PROMPT 116
#define CENTER_PAD_ADJUSTED_PROMPT 117
#define READY_SCREEN_ID 118
#define PRESS_SWITCH_PROMPT_ID 119
#define DEVICE_PROMPT_ID 120
#define STARTUP_SPLASH_SCREEN_ID 121
#define STATUS_PROMPT_ID 122
#define HB_OK_ID 123
#define HB_TIMEOUT_ID 124
#define POWER_OFF_ID 125
#define POWER_ON_ID 126
#define HB_OON_ID 127
#define CENTER_PAD_ON_BTN_ID 128
#define MINIMUM_INSTRUCT_PROMPT_ID 129
#define LEFT_PAD_ON_BTN_ID 130
#define RIGHT_PAD_ON_BTN_ID 131
#define MAXIMUM_INSTRUCT_PROMPT_ID 132
#define VALUE_PROMPT_ID 133
#define PAD_VALUE_PROMPT_ID 134
#define CENTER_PAD_PROPORTIONAL_BTN_ID 135
#define LEFT_PAD_PROPORTIONAL_BTN_ID 136
#define RIGHT_PAD_PROPORTIONAL_BTN_ID 137
#define SETTING_PROMPT01_ID 138
#define CLICKS_PROMPT_ID 139
#define POWERUP_IDLE_PROMPT_ID 140
#define TIMEOUT_BTN_ID 141
#define RNET_ACTIVE_PROMPT_ID 142
#define CLICKS_TOGGLE_BTN 143
#define POWER_UP_TOGGLE_BTN 144
#define RNET_TOGGLE_BTN 145
#define MODE_PORT_SCHEMA_PROMPT_ID 146
#define MODE_REVERSE_TOGGLE_BTN 147
#define PAD_TYPE_BTN_ID 148
#define PAD_DIRECTIONS_BTN_ID 149
#define MINIMUM_DRIVE_BTN_ID 150
#define PAD_SETTINGS_BTN_ID 151
#define SETTINGS_BTN_ID 152
#define MORE_BTN_ID 153
#define MAIN_USER_SCREEN_ID 154
#define FIRST_ICON 155
#define FIRST_PROMPT 156
#define FOURTH_ICON 157
#define FOURTH_PROMPT 158
#define SECOND_ICON 159
#define SECOND_PROMPT 160
#define THIRD_ICON 161
#define THIRD_PROMPT 162
#define BOTH_ARROW_BTN_ID 163
#define Fifth_ICON 164
#define FIFTH_PROMPT 165
#define ATTENDANT_BTN_ID 166
#define SIP_N_PUFF_ICON 167


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_ML_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID unchecked_pixelmap_id;
    GX_RESOURCE_ID checked_pixelmap_id;
    GX_RESOURCE_ID unchecked_disabled_pixelmap_id;
    GX_RESOURCE_ID checked_disabled_pixelmap_id;
} GX_CHECKBOX_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct ION_AUDITORYSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT ION_AuditorySettingsScreen_Auditory_Volume_Prompt;
    GX_MULTI_LINE_TEXT_BUTTON ION_AuditorySettingsScreen_Auditory_VolumeDown_Btn;
    GX_MULTI_LINE_TEXT_BUTTON ION_AuditorySettingsScreen_Auditory_VolumeUP_Btn;
    GX_TEXT_BUTTON ION_AuditorySettingsScreen_OK_Button;
    GX_PROMPT ION_AuditorySettingsScreen_PadClicksPrompt;
    GX_CHECKBOX ION_AuditorySettingsScreen_PadClicksToggleBtn;
    GX_PROMPT ION_AuditorySettingsScreen_TonePrompt;
    GX_CHECKBOX ION_AuditorySettingsScreen_ToneToggleBtn;
    GX_PROMPT ION_AuditorySettingsScreen_EnahancedPrompt;
    GX_CHECKBOX ION_AuditorySettingsScreen_VoiceToggleBtn;
} ION_AUDITORYSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct ION_DIAG_4QUAD_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON ION_Diag_4Quad_Screen_Diag_FWD;
    GX_ICON ION_Diag_4Quad_Screen_Diag_LEFT;
    GX_ICON ION_Diag_4Quad_Screen_Diag_REV;
    GX_ICON ION_Diag_4Quad_Screen_Diag_RIGHT;
    GX_PROMPT ION_Diag_4Quad_Screen_InstructionsText;
    GX_ICON_BUTTON ION_Diag_4Quad_Screen_ModePort_IconButton;
    GX_PROMPT ION_Diag_4Quad_Screen_ModePort_Prompt;
    GX_ICON_BUTTON ION_Diag_4Quad_Screen_UserPort_IconButton;
    GX_PROMPT ION_Diag_4Quad_Screen_UserPort_Prompt;
    GX_TEXT_BUTTON ION_Diag_4Quad_Screen_OK_Button;
} ION_DIAG_4QUAD_SCREEN_CONTROL_BLOCK;

typedef struct ION_SNP_CALIBRATE_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON_BUTTON ION_SNP_Calibrate_Screen_Plus_Button;
    GX_ICON_BUTTON ION_SNP_Calibrate_Screen_Minus_Button;
    GX_TEXT_BUTTON ION_SNP_Calibrate_Screen_OK_Button;
    GX_PROMPT ION_SNP_Calibrate_Screen_SNP_Value_Prompt;
    GX_PIXELMAP_SLIDER ION_SNP_Calibrate_Screen_SNP_Calibrate_Slider;
    GX_PROMPT ION_SNP_Calibrate_Screen_SNP_Calibrate_Value_Prompt;
    GX_ICON ION_SNP_Calibrate_Screen_SNP_HardPuff_Icon;
    GX_ICON ION_SNP_Calibrate_Screen_SNP_HardSip_Icon;
    GX_ICON ION_SNP_Calibrate_Screen_SNP_SoftSip_Icon;
    GX_ICON ION_SNP_Calibrate_Screen_SNP_SoftPuff_Icon;
    GX_PROMPT ION_SNP_Calibrate_Screen_SNP_Calibration_Prompt;
} ION_SNP_CALIBRATE_SCREEN_CONTROL_BLOCK;

typedef struct ION_HEADARRAY_DIAGNOSTICSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON ION_HeadArray_DiagnosticScreen_CenterPadDigital_Button;
    GX_PROMPT ION_HeadArray_DiagnosticScreen_InstructionsText;
    GX_PIXELMAP_BUTTON ION_HeadArray_DiagnosticScreen_LeftPadDigital_Button;
    GX_TEXT_BUTTON ION_HeadArray_DiagnosticScreen_OK_Button;
    GX_PIXELMAP_BUTTON ION_HeadArray_DiagnosticScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON ION_HeadArray_DiagnosticScreen_CenterPadOff_Button;
    GX_PIXELMAP_BUTTON ION_HeadArray_DiagnosticScreen_LeftPadOff_Button;
    GX_PIXELMAP_BUTTON ION_HeadArray_DiagnosticScreen_RightPadOff_Button;
    GX_ICON_BUTTON ION_HeadArray_DiagnosticScreen_ModePort_IconButton;
    GX_PROMPT ION_HeadArray_DiagnosticScreen_ModePort_Prompt;
    GX_ICON_BUTTON ION_HeadArray_DiagnosticScreen_UserPort_IconButton;
    GX_PROMPT ION_HeadArray_DiagnosticScreen_UserPort_Prompt;
} ION_HEADARRAY_DIAGNOSTICSCREEN_CONTROL_BLOCK;

typedef struct ION_PADDIRECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON ION_PadDirectionScreen_CenterPad_Button;
    GX_PIXELMAP_BUTTON ION_PadDirectionScreen_LeftPad_Button;
    GX_TEXT_BUTTON ION_PadDirectionScreen_OK_Button;
    GX_PIXELMAP_BUTTON ION_PadDirectionScreen_RightPad_Button;
    GX_PROMPT ION_PadDirectionScreen_SettingPadPrompt;
    GX_PIXELMAP_BUTTON ION_PadDirectionScreen_ReversePad_Button;
} ION_PADDIRECTIONSCREEN_CONTROL_BLOCK;

typedef struct ION_SIPNPUFFPROGRAMMINGSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_VERTICAL_LIST ION_SIPnPuffProgrammingScreen_ListBox;
    GX_SCROLLBAR ION_SIPnPuffProgrammingScreen_Vertical_scroll;
    GX_TEXT_BUTTON ION_SIPnPuffProgrammingScreen_OK_Button;
    GX_PROMPT ION_SIPnPuffProgrammingScreen_DriverName_Prompt;
} ION_SIPNPUFFPROGRAMMINGSCREEN_CONTROL_BLOCK;

typedef struct ION_DRIVERCONTROLPROGRAMMINGSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_VERTICAL_LIST ION_DriverControlProgrammingScreen_ListBox;
    GX_SCROLLBAR ION_DriverControlProgrammingScreen_Vertical_scroll;
    GX_TEXT_BUTTON ION_DriverControlProgrammingScreen_OK_Button;
    GX_PROMPT ION_DriverControlProgrammingScreen_DriverName_Prompt;
} ION_DRIVERCONTROLPROGRAMMINGSCREEN_CONTROL_BLOCK;

typedef struct ION_DRIVERSELECTSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_VERTICAL_LIST ION_DriverSelectScreen_ListBox;
    GX_SCROLLBAR ION_DriverSelectScreen_FeatureList_vertical_scroll;
    GX_TEXT_BUTTON ION_DriverSelectScreen_OK_Button;
    GX_PROMPT ION_DriverSelectScreen_SetOrChangedDevice_Prompt;
} ION_DRIVERSELECTSCREEN_CONTROL_BLOCK;

typedef struct ION_MAINPROGRAMMINGSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON ION_MainProgrammingScreen_OK_Button;
    GX_PROMPT ION_MainProgrammingScreen_SetOrChangeDevice_Prompt;
    GX_VERTICAL_LIST ION_MainProgrammingScreen_ION_MainProgrammingListBox;
    GX_SCROLLBAR ION_MainProgrammingScreen_ION_MainProgramming_vertical_scroll;
} ION_MAINPROGRAMMINGSCREEN_CONTROL_BLOCK;

typedef struct ION_BT_SETUPSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON ION_BT_SetupScreen_BT_Color_Button;
    GX_TEXT_BUTTON ION_BT_SetupScreen_BT_Pairing_Button;
    GX_TEXT_BUTTON ION_BT_SetupScreen_BT_Type_Button;
    GX_TEXT_BUTTON ION_BT_SetupScreen_OK_Button;
    GX_PROMPT ION_BT_SetupScreen_BT_Number_Prompt;
    GX_PROMPT ION_BT_SetupScreen_BT_SelectTypeAndColor_Prompt;
} ION_BT_SETUPSCREEN_CONTROL_BLOCK;

typedef struct ION_BT_ACTIVESCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT ION_BT_ActiveScreen_ActiveDeviceName;
    GX_PROMPT ION_BT_ActiveScreen_ActiveStatusPrompt;
} ION_BT_ACTIVESCREEN_CONTROL_BLOCK;

typedef struct ION_BT_USERSELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_VERTICAL_LIST ION_BT_UserSelectionScreen_BluetoothDeviceListBox;
    GX_SCROLLBAR ION_BT_UserSelectionScreen_BT_User_List_vertical_scroll;
    GX_BUTTON ION_BT_UserSelectionScreen_BluetoothSubmenuChanged_Btn;
} ION_BT_USERSELECTIONSCREEN_CONTROL_BLOCK;

typedef struct ION_BT_DEVICESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_VERTICAL_LIST ION_BT_DeviceSelectionScreen_BluetoothDeviceListBox;
    GX_SCROLLBAR ION_BT_DeviceSelectionScreen_FeatureList_vertical_scroll;
    GX_TEXT_BUTTON ION_BT_DeviceSelectionScreen_OK_Button;
    GX_PROMPT ION_BT_DeviceSelectionScreen_SelectBTDeviceToChange_Prompt;
} ION_BT_DEVICESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct SNP_CALIBRATIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT SNP_CalibrationScreen_prompt_1;
} SNP_CALIBRATIONSCREEN_CONTROL_BLOCK;

typedef struct ERROR_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT Error_Screen_CyclePower_Prompt;
    GX_BUTTON Error_Screen_ERROR_Button;
    GX_ICON Error_Screen_icon;
    GX_PROMPT Error_Screen_Faulty_Pad_Prompt;
    GX_ICON Error_Screen_LeftPadError_Icon;
    GX_ICON Error_Screen_RightPadError_Icon;
    GX_ICON Error_Screen_CenterPadError_Icon;
} ERROR_SCREEN_CONTROL_BLOCK;

typedef struct ATTENDANTSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT AttendantSettingsScreen_ActivePrompt;
    GX_PROMPT AttendantSettingsScreen_ProportionalPrompt;
    GX_TEXT_BUTTON AttendantSettingsScreen_OK_Button;
    GX_CHECKBOX AttendantSettingsScreen_ActiveToggleBtn;
    GX_CHECKBOX AttendantSettingsScreen_ProportionalToggleBtn;
} ATTENDANTSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct ATTENDANTSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON AttendantScreen_AttendantDriverControl;
    GX_ICON_BUTTON AttendantScreen_OK_Btn;
    GX_PROMPT AttendantScreen_RawPosition_Prompt;
    GX_PROMPT AttendantScreen_DriveDemand_Prompt;
    GX_NUMERIC_PROMPT AttendantScreen_Distance_Prompt;
    GX_PROMPT AttendantScreen_SillyName;
    GX_ICON_BUTTON AttendantScreen_StopButton;
    GX_BUTTON AttendantScreen_HA_PowerOff_Button;
    GX_BUTTON AttendantScreen_HA_PowerOn_Button;
} ATTENDANTSCREEN_CONTROL_BLOCK;

typedef struct FEATURESETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_VERTICAL_LIST FeatureSettingsScreen_FeatureListBox;
    GX_SCROLLBAR FeatureSettingsScreen_FeatureList_vertical_scroll;
    GX_TEXT_BUTTON FeatureSettingsScreen_OK_Button;
} FEATURESETTINGSSCREEN_CONTROL_BLOCK;

typedef struct PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON PerformanceSelectionScreen_GotoVeerAdjust_Button;
    GX_TEXT_BUTTON PerformanceSelectionScreen_OK_Button;
    GX_TEXT_BUTTON PerformanceSelectionScreen_AttendantSetting_Button;
} PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct MORESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON MoreSelectionScreen_GotoDiagostics_Button;
    GX_TEXT_BUTTON MoreSelectionScreen_GotoResetSettings_lButton;
    GX_PROMPT MoreSelectionScreen_HeadArray_VersionPrompt;
    GX_PROMPT MoreSelectionScreen_VersionPrompt;
    GX_TEXT_BUTTON MoreSelectionScreen_OK_Button;
} MORESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct MINIMUMDRIVESCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON MinimumDriveScreen_RightPadPercentage_Button;
    GX_TEXT_BUTTON MinimumDriveScreen_OK_Button;
    GX_PROMPT MinimumDriveScreen_Prompt_ForEachPad;
    GX_PROMPT MinimumDriveScreen_Prompt_SetMinimumSpeed;
    GX_TEXT_BUTTON MinimumDriveScreen_CenterPadPercentage_Button;
    GX_TEXT_BUTTON MinimumDriveScreen_LeftPadPercentage_Button;
} MINIMUMDRIVESCREEN_CONTROL_BLOCK;

typedef struct USERSELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON UserSelectionScreen_FeatureSettings_lButton;
    GX_TEXT_BUTTON UserSelectionScreen_Settings_Button;
    GX_TEXT_BUTTON UserSelectionScreen_OK_Button;
    GX_MULTI_LINE_TEXT_BUTTON UserSelectionScreen_Performance_Attendant_Button;
} USERSELECTIONSCREEN_CONTROL_BLOCK;

typedef struct RESETSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON ResetScreen_Continue_Button;
    GX_ICON ResetScreen_icon;
    GX_TEXT_BUTTON ResetScreen_OK_Button;
    GX_PROMPT ResetScreen_Prompt1;
    GX_PROMPT ResetScreen_Prompt2;
    GX_PROMPT ResetScreen_Prompt3;
    GX_PROMPT ResetScreen_Prompt4;
} RESETSCREEN_CONTROL_BLOCK;

typedef struct RESETFINISHSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON ResetFinishScreen_OK_Button;
    GX_PROMPT ResetFinishScreen_Prompt;
} RESETFINISHSCREEN_CONTROL_BLOCK;

typedef struct PRIMARYTEMPLATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON PrimaryTemplate_UpArrowButton;
    GX_PIXELMAP_BUTTON PrimaryTemplate_DownArrowButton;
    GX_TEXT_BUTTON PrimaryTemplate_LongPressButton;
    GX_BUTTON PrimaryTemplate_OON_OK_Button;
    GX_BUTTON PrimaryTemplate_GotoBluetoothSubmenu;
} PRIMARYTEMPLATE_CONTROL_BLOCK;

typedef struct VEERADJUSTSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_SLIDER VeerAdjustScreen_VeerSlider;
    GX_TEXT_BUTTON VeerAdjustScreen_OK_Button;
    GX_TEXT_BUTTON VeerAdjustScreen_SliderValue_Button;
    GX_PROMPT VeerAdjustScreen_InstructionLine_1;
    GX_PROMPT VeerAdjustScreen_InstructionLine_2;
} VEERADJUSTSCREEN_CONTROL_BLOCK;

typedef struct OON_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT OON_Screen_prompt;
} OON_SCREEN_CONTROL_BLOCK;

typedef struct DIAGNOSTICSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadDigital_Button;
    GX_PROMPT DiagnosticScreen_InstructionsText;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadDigital_Button;
    GX_TEXT_BUTTON DiagnosticScreen_OK_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadOff_Button;
    GX_PROMPT DiagnosticScreen_LeftPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_LeftPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_Adjusted_Prompt;
    GX_ICON_BUTTON DiagnosticScreen_ModePort_IconButton;
    GX_PROMPT DiagnosticScreen_ModePort_Prompt;
    GX_ICON_BUTTON DiagnosticScreen_UserPort_IconButton;
    GX_PROMPT DiagnosticScreen_UserPort_Prompt;
} DIAGNOSTICSCREEN_CONTROL_BLOCK;

typedef struct READYSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT ReadyScreen_PressSwitchPrompt;
    GX_PROMPT ReadyScreen_DevicePrompt;
} READYSCREEN_CONTROL_BLOCK;

typedef struct STARTUPSPLASHSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON StartupSplashScreen_pixelmap_button;
    GX_PROMPT StartupSplashScreen_StatusPrompt;
    GX_BUTTON StartupSplashScreen_HB_OK_Button;
    GX_BUTTON StartupSplashScreen_HB_TimeoutButton;
    GX_BUTTON StartupSplashScreen_PowerOffButton;
    GX_BUTTON StartupSplashScreen_PowerOnButton;
    GX_BUTTON StartupSplashScreen_HB_OON_Button;
} STARTUPSPLASHSCREEN_CONTROL_BLOCK;

typedef struct PADCALIBRATIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON PadCalibrationScreen_CenterPadON_Button;
    GX_PROMPT PadCalibrationScreen_MinimumInstructionsText;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_LeftPadON_Button;
    GX_TEXT_BUTTON PadCalibrationScreen_OK_Button;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_RightPadON_Button;
    GX_PROMPT PadCalibrationScreen_MaximumInstructionsText;
    GX_NUMERIC_PROMPT PadCalibrationScreen_Value_Prompt;
    GX_NUMERIC_PROMPT PadCalibrationScreen_PadValue_Prompt;
} PADCALIBRATIONSCREEN_CONTROL_BLOCK;

typedef struct SETPADTYPESCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadProportional_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadProportional_Button;
    GX_TEXT_BUTTON SetPadTypeScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadProportional_Button;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt_1;
} SETPADTYPESCREEN_CONTROL_BLOCK;

typedef struct USERSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT UserSettingsScreen_Clicks_Prompt;
    GX_TEXT_BUTTON UserSettingsScreen_OK_Button;
    GX_PROMPT UserSettingsScreen_Tmeout_Prompt;
    GX_PROMPT UserSettingsScreen_PowerUpIdle_Prompt;
    GX_TEXT_BUTTON UserSettingsScreen_Timeout_Button;
    GX_PROMPT UserSettingsScreen_RNetActive_Prompt;
    GX_CHECKBOX UserSettingsScreen_ClicksToggleBtn;
    GX_CHECKBOX UserSettingsScreen_PowerUpToggleBtn;
    GX_CHECKBOX UserSettingsScreen_RNET_ToggleBtn;
    GX_PROMPT UserSettingsScreen_ModePortSchema_Prompt;
    GX_CHECKBOX UserSettingsScreen_ModeReverse_ToggleBtn;
} USERSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadType_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadDirections_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_OK_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_MinimumDrive_lButton;
} PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct SETPADDIRECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Button;
    GX_TEXT_BUTTON SetPadDirectionScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt;
} SETPADDIRECTIONSCREEN_CONTROL_BLOCK;

typedef struct HHP_START_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON HHP_Start_Screen_OK_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_PadSettings_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_Settings_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_MainMore_Button;
} HHP_START_SCREEN_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON_BUTTON MainUserScreen_FirstIcon;
    GX_PROMPT MainUserScreen_FirstPrompt;
    GX_ICON_BUTTON MainUserScreen_FourthIcon;
    GX_PROMPT MainUserScreen_FourthPrompt;
    GX_ICON_BUTTON MainUserScreen_SecondIcon;
    GX_PROMPT MainUserScreen_SecondPrompt;
    GX_ICON_BUTTON MainUserScreen_ThirdIcon;
    GX_PROMPT MainUserScreen_ThirdPrompt;
    GX_BUTTON MainUserScreen_BothArrowButtonID_VirtualButton;
    GX_ICON_BUTTON MainUserScreen_FifthIcon;
    GX_PROMPT MainUserScreen_FifthPrompt;
    GX_PIXELMAP_BUTTON MainUserScreen_Fusion_Button;
    GX_ICON_BUTTON MainUserScreen_Attendant_Button;
    GX_ICON MainUserScreen_HA_Status;
    GX_ICON MainUserScreen_HAStatus_LeftPad_Green;
    GX_ICON MainUserScreen_HAStatus_RightPad_Green;
    GX_ICON MainUserScreen_HAStatus_CenterPad_Green;
    GX_ICON MainUserScreen_HAStatus_CenterPad_Orange;
    GX_ICON MainUserScreen_HAStatus_CenterPad_White;
    GX_ICON MainUserScreen_HAStatus_LeftPad_Orange;
    GX_ICON MainUserScreen_HAStatus_LeftPad_White;
    GX_ICON MainUserScreen_HAStatus_RightPad_Orange;
    GX_ICON MainUserScreen_HAStatus_RightPad_White;
    GX_ICON MainUserScreen_SipNPuff_Icon;
    GX_ICON MainUserScreen_DriverStatus;
    GX_ICON MainUserScreen_DriverControl_FWD_Green;
    GX_ICON MainUserScreen_DriverControl_LEFT_Green;
    GX_ICON MainUserScreen_DriverControl_RIGHT_Green;
    GX_ICON MainUserScreen_DriverControl_REV_Green;
} MAINUSERSCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern ION_AUDITORYSETTINGSSCREEN_CONTROL_BLOCK ION_AuditorySettingsScreen;
extern ION_DIAG_4QUAD_SCREEN_CONTROL_BLOCK ION_Diag_4Quad_Screen;
extern ION_SNP_CALIBRATE_SCREEN_CONTROL_BLOCK ION_SNP_Calibrate_Screen;
extern ION_HEADARRAY_DIAGNOSTICSCREEN_CONTROL_BLOCK ION_HeadArray_DiagnosticScreen;
extern ION_PADDIRECTIONSCREEN_CONTROL_BLOCK ION_PadDirectionScreen;
extern ION_SIPNPUFFPROGRAMMINGSCREEN_CONTROL_BLOCK ION_SIPnPuffProgrammingScreen;
extern ION_DRIVERCONTROLPROGRAMMINGSCREEN_CONTROL_BLOCK ION_DriverControlProgrammingScreen;
extern ION_DRIVERSELECTSCREEN_CONTROL_BLOCK ION_DriverSelectScreen;
extern ION_MAINPROGRAMMINGSCREEN_CONTROL_BLOCK ION_MainProgrammingScreen;
extern ION_BT_SETUPSCREEN_CONTROL_BLOCK ION_BT_SetupScreen;
extern ION_BT_ACTIVESCREEN_CONTROL_BLOCK ION_BT_ActiveScreen;
extern ION_BT_USERSELECTIONSCREEN_CONTROL_BLOCK ION_BT_UserSelectionScreen;
extern ION_BT_DEVICESELECTIONSCREEN_CONTROL_BLOCK ION_BT_DeviceSelectionScreen;
extern SNP_CALIBRATIONSCREEN_CONTROL_BLOCK SNP_CalibrationScreen;
extern ERROR_SCREEN_CONTROL_BLOCK Error_Screen;
extern ATTENDANTSETTINGSSCREEN_CONTROL_BLOCK AttendantSettingsScreen;
extern ATTENDANTSCREEN_CONTROL_BLOCK AttendantScreen;
extern FEATURESETTINGSSCREEN_CONTROL_BLOCK FeatureSettingsScreen;
extern PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK PerformanceSelectionScreen;
extern MORESELECTIONSCREEN_CONTROL_BLOCK MoreSelectionScreen;
extern MINIMUMDRIVESCREEN_CONTROL_BLOCK MinimumDriveScreen;
extern USERSELECTIONSCREEN_CONTROL_BLOCK UserSelectionScreen;
extern RESETSCREEN_CONTROL_BLOCK ResetScreen;
extern RESETFINISHSCREEN_CONTROL_BLOCK ResetFinishScreen;
extern PRIMARYTEMPLATE_CONTROL_BLOCK PrimaryTemplate;
extern VEERADJUSTSCREEN_CONTROL_BLOCK VeerAdjustScreen;
extern OON_SCREEN_CONTROL_BLOCK OON_Screen;
extern DIAGNOSTICSCREEN_CONTROL_BLOCK DiagnosticScreen;
extern READYSCREEN_CONTROL_BLOCK ReadyScreen;
extern STARTUPSPLASHSCREEN_CONTROL_BLOCK StartupSplashScreen;
extern PADCALIBRATIONSCREEN_CONTROL_BLOCK PadCalibrationScreen;
extern SETPADTYPESCREEN_CONTROL_BLOCK SetPadTypeScreen;
extern USERSETTINGSSCREEN_CONTROL_BLOCK UserSettingsScreen;
extern PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK PadOptionsSettingsScreen;
extern SETPADDIRECTIONSCREEN_CONTROL_BLOCK SetPadDirectionScreen;
extern HHP_START_SCREEN_CONTROL_BLOCK HHP_Start_Screen;
extern MAINUSERSCREEN_CONTROL_BLOCK MainUserScreen;
#endif

/* Prototype Dave2D display driver specific functions                          */

UINT _gx_synergy_display_driver_setup(GX_DISPLAY *display);
#if defined(GX_TARGET_WIN32) || defined(GX_TARGET_LINUX)
UINT win32_dave2d_graphics_driver_setup_565rgb(GX_DISPLAY *display);
#else
VOID _gx_display_driver_565rgb_setup(GX_DISPLAY *display, VOID *aux_data,
                           VOID (*toggle_function)(struct GX_CANVAS_STRUCT *canvas,
                           GX_RECTANGLE *dirty_area));
VOID _gx_dave2d_horizontal_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT ypos);
VOID _gx_dave2d_vertical_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT ystart, INT yend, INT xpos);
VOID _gx_dave2d_pixel_write_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR color);
VOID _gx_dave2d_pixel_blend_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR fcolor, GX_UBYTE alpha);
VOID _gx_dave2d_pixelmap_rotate_16bpp(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap, INT angle, INT rot_cx, INT rot_cy);
VOID _gx_dave2d_drawing_initiate(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_drawing_complete(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_horizontal_line(GX_DRAW_CONTEXT *context,
                             INT xstart, INT xend, INT ypos, INT width, GX_COLOR color);
VOID _gx_dave2d_vertical_line(GX_DRAW_CONTEXT *context,
                             INT ystart, INT yend, INT xpos, INT width, GX_COLOR color);
VOID _gx_dave2d_canvas_copy(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_canvas_blend(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_simple_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_simple_wide_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart,
                                INT xend, INT yend);
VOID _gx_dave2d_aliased_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_aliased_wide_line(GX_DRAW_CONTEXT *context, INT xstart,
                                        INT ystart, INT xend, INT yend);
VOID _gx_dave2d_pixelmap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_horizontal_pixelmap_line_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, INT xstart, INT xend, INT y, GX_FILL_PIXELMAP_INFO *info);
VOID _gx_dave2d_pixelmap_blend(GX_DRAW_CONTEXT *context, INT xpos, INT ypos,
                                      GX_PIXELMAP *pixelmap, GX_UBYTE alpha);
VOID _gx_dave2d_polygon_draw(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_polygon_fill(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_block_move(GX_DRAW_CONTEXT *context,
                          GX_RECTANGLE *block, INT xshift, INT yshift);
VOID _gx_dave2d_alphamap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_compressed_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_buffer_toggle(GX_CANVAS *canvas, GX_RECTANGLE *dirty);
#if defined(GX_ARC_DRAWING_SUPPORT)
VOID _gx_dave2d_aliased_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_pie_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
#endif

#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT ION_AuditorySettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID ION_AuditorySettingsScreen_draw_function(GX_WINDOW *widget);
UINT ION_Diag_4Quad_Screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID ION_Diag_4Quad_Screen_draw_event(GX_WINDOW *widget);
UINT ION_SNP_Calibrate_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SNP_Calibrate_Slider_event_function(GX_PIXELMAP_SLIDER *widget, GX_EVENT *event_ptr);
VOID SNP_Calibrate_Slider_Draw_Function(GX_PIXELMAP_SLIDER *widget);
UINT ION_HeadArray_DiagnosticScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID ION_HeadArray_DiagnosticScreen_draw_event(GX_WINDOW *widget);
UINT ION_PadDirectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ION_SIPNPUFF_ProgrammingScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID FeatureList_callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT ION_DriverControlProgrammingScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ION_DriverSelectScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ION_MainProgrammingScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID ION_MainProgrammingList_callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT ION_BT_Setup_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ION_BT_ActiveScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ION_BT_UserSelectionScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID BluetoothList_callback(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT ION_BluetoothDeviceSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Error_Screen_draw_function(GX_WINDOW *widget);
UINT AttendantSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT AttendantScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT FeatureSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PerformanceSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MoreSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MinimumDriveScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT UserSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ResetScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ResetFinishScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT VeerAdjust_Screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID VeerAdjust_Screen_draw_function(GX_WINDOW *widget);
UINT VeerSlider_event_function(GX_PIXELMAP_SLIDER *widget, GX_EVENT *event_ptr);
VOID Slider_Draw_Function(GX_PIXELMAP_SLIDER *widget);
UINT OON_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID OON_Screen_draw_function(GX_WINDOW *widget);
UINT DiagnosticScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID DiagnosticScreen_draw_event(GX_WINDOW *widget);
UINT Ready_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Ready_Screen_draw_function(GX_WINDOW *widget);
UINT StartupSplashScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID StartupSplashScreen_draw_function(GX_WINDOW *widget);
UINT CalibrationScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID CalibrationScreen_draw(GX_WINDOW *widget);
UINT SetPadTypeScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SetPadTypeScreen_Draw_Function(GX_WINDOW *widget);
UINT UserSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PadOptionsSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SetPadDirectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SetPadDirectionScreen_draw_function(GX_WINDOW *widget);
UINT HHP_Start_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MainUserScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID MainUserScreen_draw_function(GX_WINDOW *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_multi_line_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_checkbox_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_scrollbar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), USHORT language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
