/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.4.2.9                                               */
/*  Date (dd.mm.yyyy):  3. 8.2020   Time (hh:mm): 11:25                        */
/*******************************************************************************/


#ifndef _ASL_HHP_DISPLAY_GUIX_SPECIFICATIONS_H_
#define _ASL_HHP_DISPLAY_GUIX_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define POWER_PROMPT_ID 1
#define BLUETOOTH_PROMPT_ID 2
#define NEXT_FUNCTION_PROMPT_ID 3
#define NEXT_PROFILE_PROMPT_ID 4
#define OK_BTN_ID 5
#define POWER_TOGGLE_BTN 6
#define BLUETOOTH_TOGGLE_BTN 7
#define NEXT_FUNCTION_TOGGLE_BTN 8
#define NEXT_PROFILE_TOGGLE_BTN 9
#define PERFORMANCE_SELECTION_SCREEN_ID 10
#define GOTO_VEER_ADJUST_BTN_ID 11
#define GOTO_DIAGNOSTICS_BTN_ID 12
#define GOTO_RESET_SCREEN_BTN_ID 13
#define HEAD_ARRAY_VERSION_PROMPT_ID 14
#define DISPLAY_VERSION_PROMPT_ID 15
#define RIGHT_PAD_PERCENTAGE_BTN_ID 16
#define PROMPT_FOR_EACH_PAD 17
#define PROMPT_SET_MINIMUM_SPEED 18
#define CENTER_PAD_PERCENTAGE_BTN_ID 19
#define LEFT_PAD_PERCENTAGE_BTN_ID 20
#define FEATURE_BTN_ID 21
#define USER_SETTINGS_BTN_ID 22
#define PERFORMANCE_BTN_ID 23
#define RESET_SCREEN_ID 24
#define CONTINUE_BTN_ID 25
#define PROMPT1_ID 26
#define PROMPT2_ID 27
#define PROMPT3_ID 28
#define PROMPT4_ID 29
#define PROMPT_ID 30
#define UP_ARROW_BTN_ID 31
#define DOWN_ARROW_BTN_ID 32
#define PAD_ACTIVE_BTN_ID 33
#define LONG_PRESS_BUTTON_ID 34
#define VEER_ADJUST_SCREEN_ID 35
#define VEER_SLIDER_ID 36
#define SLIDE_VALUE_BUTTON 37
#define OON_SCREEN_ID 38
#define OON_OK_BTN_ID 39
#define CENTER_PAD_DIGITAL_BTN_ID 40
#define INSTRUCT_PROMPT_ID 41
#define LEFT_PAD_DIGITAL_BTN_ID 42
#define RIGHT_PAD_DIGITAL_BTN_ID 43
#define CENTER_PAD_PROP_BTN_ID 44
#define LEFT_PAD_PROP_BTN_ID 45
#define RIGHT_PAD_PROP_BTN_ID 46
#define CENTER_PAD_OFF_BTN_ID 47
#define LEFT_PAD_OFF_BTN_ID 48
#define RIGHT_PAD_OFF_BTN_ID 49
#define LEFT_PAD_RAW_VALUE_PROMPT 50
#define RIGHT_PAD_RAW_VALUE_PROMPT 51
#define CENTER_PAD_RAW_VALUE_PROMPT 52
#define LEFT_PAD_ADJUSTED_PROMPT 53
#define RIGHT_PAD_ADJUSTED_PROMPT 54
#define CENTER_PAD_ADJUSTED_PROMPT 55
#define READY_SCREEN_ID 56
#define POWER_LARGE_ORANGE_PROMPT_ID 57
#define PRESS_SWITCH_PROMPT_ID 58
#define STARTUP_SPLASH_SCREEN_ID 59
#define STATUS_PROMPT_ID 60
#define HB_OK_ID 61
#define HB_TIMEOUT_ID 62
#define POWER_OFF_ID 63
#define POWER_ON_ID 64
#define HB_OON_ID 65
#define CENTER_PAD_ON_BTN_ID 66
#define MINIMUM_INSTRUCT_PROMPT_ID 67
#define LEFT_PAD_ON_BTN_ID 68
#define RIGHT_PAD_ON_BTN_ID 69
#define MAXIMUM_INSTRUCT_PROMPT_ID 70
#define VALUE_PROMPT_ID 71
#define PAD_VALUE_PROMPT_ID 72
#define CENTER_PAD_PROPORTIONAL_BTN_ID 73
#define LEFT_PAD_PROPORTIONAL_BTN_ID 74
#define RIGHT_PAD_PROPORTIONAL_BTN_ID 75
#define SETTING_PROMPT01_ID 76
#define CLICKS_PROMPT_ID 77
#define POWERUP_IDLE_PROMPT_ID 78
#define TIMEOUT_BTN_ID 79
#define RNET_ACTIVE_PROMPT_ID 80
#define CLICKS_TOGGLE_BTN 81
#define POWER_UP_TOGGLE_BTN 82
#define RNET_TOGGLE_BTN 83
#define PAD_TYPE_BTN_ID 84
#define PAD_DIRECTIONS_BTN_ID 85
#define MINIMUM_DRIVE_BTN_ID 86
#define CENTER_PAD_FORWARD_ARROW_BTN_ID 87
#define LEFT_PAD_LEFT_ARROW_BTN_ID 88
#define RIGHT_PAD_RIGHT_ARROW_BTN_ID 89
#define LEFT_PAD_RIGHT_ARROW_BTN_ID 90
#define LEFT_PAD_FORWARD_ARROW_BTN_ID 91
#define RIGHT_PAD_LEFT_ARROW_BTN_ID 92
#define RIGHT_PAD_FORWARD_ARROW_BTN_ID 93
#define CENTER_PAD_LEFT_ARROW_BTN_ID 94
#define CENTER_PAD_RIGHT_ARROW_BTN_ID 95
#define CENTER_PAD_QUESTION_BTN_ID 96
#define LEFT_PAD_QUESTION_BTN_ID 97
#define RIGHT_PAD_QUESTION_BTN_ID 98
#define PAD_SETTINGS_BTN_ID 99
#define SETTINGS_BTN_ID 100
#define MORE_BTN_ID 101
#define MAIN_USER_SCREEN_ID 102
#define FIRST_ICON 103
#define FIRST_PROMPT 104
#define FOURTH_ICON 105
#define FOURTH_PROMPT 106
#define SECOND_ICON 107
#define SECOND_PROMPT 108
#define THIRD_ICON 109
#define THIRD_PROMPT 110
#define BOTH_ARROW_BTN_ID 111
#define Fifth_ICON 112
#define FIFTH_PROMPT 113


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID unchecked_pixelmap_id;
    GX_RESOURCE_ID checked_pixelmap_id;
    GX_RESOURCE_ID unchecked_disabled_pixelmap_id;
    GX_RESOURCE_ID checked_disabled_pixelmap_id;
} GX_CHECKBOX_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct FEATURESETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT FeatureSettingsScreen_PowerPrompt;
    GX_PROMPT FeatureSettingsScreen_BluetoothPrompt;
    GX_PROMPT FeatureSettingsScreen_NextFunctionPrompt;
    GX_PROMPT FeatureSettingsScreen_NextProfilePrompt;
    GX_TEXT_BUTTON FeatureSettingsScreen_OK_Button;
    GX_CHECKBOX FeatureSettingsScreen_PowerToggleBtn;
    GX_CHECKBOX FeatureSettingsScreen_BluetoothToggleBtn;
    GX_CHECKBOX FeatureSettingsScreen_NextFunctionToggleBtn;
    GX_CHECKBOX FeatureSettingsScreen_NextProfileToggleBtn;
} FEATURESETTINGSSCREEN_CONTROL_BLOCK;

typedef struct PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON PerformanceSelectionScreen_GotoVeerAdjust_Button;
    GX_TEXT_BUTTON PerformanceSelectionScreen_OK_Button;
} PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct MORESELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON MoreSelectionScreen_GotoDiagostics_Button;
    GX_TEXT_BUTTON MoreSelectionScreen_GotoResetSettings_lButton;
    GX_PROMPT MoreSelectionScreen_HeadArray_VersionPrompt;
    GX_PROMPT MoreSelectionScreen_VersionPrompt;
    GX_TEXT_BUTTON MoreSelectionScreen_OK_Button;
} MORESELECTIONSCREEN_CONTROL_BLOCK;

typedef struct MINIMUMDRIVESCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON MinimumDriveScreen_RightPadPercentage_Button;
    GX_TEXT_BUTTON MinimumDriveScreen_OK_Button;
    GX_PROMPT MinimumDriveScreen_Prompt_ForEachPad;
    GX_PROMPT MinimumDriveScreen_Prompt_SetMinimumSpeed;
    GX_TEXT_BUTTON MinimumDriveScreen_CenterPadPercentage_Button;
    GX_TEXT_BUTTON MinimumDriveScreen_LeftPadPercentage_Button;
} MINIMUMDRIVESCREEN_CONTROL_BLOCK;

typedef struct USERSELECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON UserSelectionScreen_FeatureSettings_lButton;
    GX_TEXT_BUTTON UserSelectionScreen_Settings_Button;
    GX_TEXT_BUTTON UserSelectionScreen_OK_Button;
    GX_TEXT_BUTTON UserSelectionScreen_Performance_Button;
} USERSELECTIONSCREEN_CONTROL_BLOCK;

typedef struct RESETSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON ResetScreen_Continue_Button;
    GX_ICON ResetScreen_icon;
    GX_TEXT_BUTTON ResetScreen_OK_Button;
    GX_PROMPT ResetScreen_Prompt1;
    GX_PROMPT ResetScreen_Prompt2;
    GX_PROMPT ResetScreen_Prompt3;
    GX_PROMPT ResetScreen_Prompt4;
} RESETSCREEN_CONTROL_BLOCK;

typedef struct RESETFINISHSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON ResetFinishScreen_OK_Button;
    GX_PROMPT ResetFinishScreen_Prompt;
} RESETFINISHSCREEN_CONTROL_BLOCK;

typedef struct PRIMARYTEMPLATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON PrimaryTemplate_UpArrowButton;
    GX_PIXELMAP_BUTTON PrimaryTemplate_DownArrowButton;
    GX_TEXT_BUTTON PrimaryTemplate_PadActiveButton;
    GX_TEXT_BUTTON PrimaryTemplate_LongPressButton;
} PRIMARYTEMPLATE_CONTROL_BLOCK;

typedef struct VEERADJUSTSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_SLIDER VeerAdjustScreen_VeerSlider;
    GX_TEXT_BUTTON VeerAdjustScreen_OK_Button;
    GX_TEXT_BUTTON VeerAdjustScreen_SliderValue_Button;
    GX_PROMPT VeerAdjustScreen_InstructionLine_1;
    GX_PROMPT VeerAdjustScreen_InstructionLine_2;
} VEERADJUSTSCREEN_CONTROL_BLOCK;

typedef struct OON_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT OON_Screen_prompt;
    GX_BUTTON OON_Screen_OON_OK_Button;
} OON_SCREEN_CONTROL_BLOCK;

typedef struct DIAGNOSTICSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadDigital_Button;
    GX_PROMPT DiagnosticScreen_InstructionsText;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadDigital_Button;
    GX_TEXT_BUTTON DiagnosticScreen_OK_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadOff_Button;
    GX_PROMPT DiagnosticScreen_LeftPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_LeftPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_Adjusted_Prompt;
} DIAGNOSTICSCREEN_CONTROL_BLOCK;

typedef struct READYSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT ReadyScreen_PowerLargeOrangePrompt;
    GX_PROMPT ReadyScreen_PressSwitchPrompt;
} READYSCREEN_CONTROL_BLOCK;

typedef struct STARTUPSPLASHSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON StartupSplashScreen_pixelmap_button;
    GX_PROMPT StartupSplashScreen_StatusPrompt;
    GX_BUTTON StartupSplashScreen_HB_OK_Button;
    GX_BUTTON StartupSplashScreen_HB_TimeoutButton;
    GX_BUTTON StartupSplashScreen_PowerOffButton;
    GX_BUTTON StartupSplashScreen_PowerOnButton;
    GX_BUTTON StartupSplashScreen_HB_OON_Button;
} STARTUPSPLASHSCREEN_CONTROL_BLOCK;

typedef struct PADCALIBRATIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON PadCalibrationScreen_CenterPadON_Button;
    GX_PROMPT PadCalibrationScreen_MinimumInstructionsText;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_LeftPadON_Button;
    GX_TEXT_BUTTON PadCalibrationScreen_OK_Button;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_RightPadON_Button;
    GX_PROMPT PadCalibrationScreen_MaximumInstructionsText;
    GX_NUMERIC_PROMPT PadCalibrationScreen_Value_Prompt;
    GX_NUMERIC_PROMPT PadCalibrationScreen_PadValue_Prompt;
} PADCALIBRATIONSCREEN_CONTROL_BLOCK;

typedef struct SETPADTYPESCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadProportional_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadProportional_Button;
    GX_TEXT_BUTTON SetPadTypeScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadProportional_Button;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt_1;
} SETPADTYPESCREEN_CONTROL_BLOCK;

typedef struct USERSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT UserSettingsScreen_Clicks_Prompt;
    GX_TEXT_BUTTON UserSettingsScreen_OK_Button;
    GX_PROMPT UserSettingsScreen_Tmeout_Prompt;
    GX_PROMPT UserSettingsScreen_PowerUpIdle_Prompt;
    GX_TEXT_BUTTON UserSettingsScreen_Timeout_Button;
    GX_PROMPT UserSettingsScreen_RNetActive_Prompt;
    GX_CHECKBOX UserSettingsScreen_ClicksToggleBtn;
    GX_CHECKBOX UserSettingsScreen_PowerUpToggleBtn;
    GX_CHECKBOX UserSettingsScreen_RNET_ToggleBtn;
} USERSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadType_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_PadDirections_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_OK_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_MinimumDrive_lButton;
} PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct SETPADDIRECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_LeftArrow_Button;
    GX_TEXT_BUTTON SetPadDirectionScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_RightArrow_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt_1;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_Question_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Question_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Question_Button;
} SETPADDIRECTIONSCREEN_CONTROL_BLOCK;

typedef struct HHP_START_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON HHP_Start_Screen_OK_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_PadSettings_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_Settings_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_MainMore_Button;
} HHP_START_SCREEN_CONTROL_BLOCK;

typedef struct MAINUSERSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON_BUTTON MainUserScreen_FirstIcon;
    GX_PROMPT MainUserScreen_FirstPrompt;
    GX_ICON_BUTTON MainUserScreen_FourthIcon;
    GX_PROMPT MainUserScreen_FourthPrompt;
    GX_ICON_BUTTON MainUserScreen_SecondIcon;
    GX_PROMPT MainUserScreen_SecondPrompt;
    GX_ICON_BUTTON MainUserScreen_ThirdIcon;
    GX_PROMPT MainUserScreen_ThirdPrompt;
    GX_BUTTON MainUserScreen_BothArrowButtonID_VirtualButton;
    GX_ICON_BUTTON MainUserScreen_FifthIcon;
    GX_PROMPT MainUserScreen_FifthPrompt;
} MAINUSERSCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern FEATURESETTINGSSCREEN_CONTROL_BLOCK FeatureSettingsScreen;
extern PERFORMANCESELECTIONSCREEN_CONTROL_BLOCK PerformanceSelectionScreen;
extern MORESELECTIONSCREEN_CONTROL_BLOCK MoreSelectionScreen;
extern MINIMUMDRIVESCREEN_CONTROL_BLOCK MinimumDriveScreen;
extern USERSELECTIONSCREEN_CONTROL_BLOCK UserSelectionScreen;
extern RESETSCREEN_CONTROL_BLOCK ResetScreen;
extern RESETFINISHSCREEN_CONTROL_BLOCK ResetFinishScreen;
extern PRIMARYTEMPLATE_CONTROL_BLOCK PrimaryTemplate;
extern VEERADJUSTSCREEN_CONTROL_BLOCK VeerAdjustScreen;
extern OON_SCREEN_CONTROL_BLOCK OON_Screen;
extern DIAGNOSTICSCREEN_CONTROL_BLOCK DiagnosticScreen;
extern READYSCREEN_CONTROL_BLOCK ReadyScreen;
extern STARTUPSPLASHSCREEN_CONTROL_BLOCK StartupSplashScreen;
extern PADCALIBRATIONSCREEN_CONTROL_BLOCK PadCalibrationScreen;
extern SETPADTYPESCREEN_CONTROL_BLOCK SetPadTypeScreen;
extern USERSETTINGSSCREEN_CONTROL_BLOCK UserSettingsScreen;
extern PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK PadOptionsSettingsScreen;
extern SETPADDIRECTIONSCREEN_CONTROL_BLOCK SetPadDirectionScreen;
extern HHP_START_SCREEN_CONTROL_BLOCK HHP_Start_Screen;
extern MAINUSERSCREEN_CONTROL_BLOCK MainUserScreen;
#endif

/* Prototype Synergy display driver specific functions                         */

UINT _gx_synergy_display_driver_setup(GX_DISPLAY *display);
#if defined(GX_TARGET_WIN32) || defined(GX_TARGET_LINUX)
UINT win32_synergy_graphics_driver_setup_565rgb(GX_DISPLAY *display);
#else
VOID _gx_display_driver_565rgb_setup(GX_DISPLAY *display, VOID *aux_data,
                           VOID (*toggle_function)(struct GX_CANVAS_STRUCT *canvas,
                           GX_RECTANGLE *dirty_area));
VOID _gx_dave2d_horizontal_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT ypos);
VOID _gx_dave2d_vertical_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT ystart, INT yend, INT xpos);
VOID _gx_dave2d_pixel_write_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR color);
VOID _gx_dave2d_pixel_blend_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR fcolor, GX_UBYTE alpha);
VOID _gx_dave2d_pixelmap_rotate_16bpp(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap, INT angle, INT rot_cx, INT rot_cy);
VOID _gx_dave2d_drawing_initiate(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_drawing_complete(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_horizontal_line(GX_DRAW_CONTEXT *context,
                             INT xstart, INT xend, INT ypos, INT width, GX_COLOR color);
VOID _gx_dave2d_vertical_line(GX_DRAW_CONTEXT *context,
                             INT ystart, INT yend, INT xpos, INT width, GX_COLOR color);
VOID _gx_dave2d_canvas_copy(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_canvas_blend(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_simple_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_simple_wide_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart,
                                INT xend, INT yend);
VOID _gx_dave2d_aliased_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_aliased_wide_line(GX_DRAW_CONTEXT *context, INT xstart,
                                        INT ystart, INT xend, INT yend);
VOID _gx_dave2d_pixelmap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_horizontal_pixelmap_line_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, INT xstart, INT xend, INT y, GX_FILL_PIXELMAP_INFO *info);
VOID _gx_dave2d_pixelmap_blend(GX_DRAW_CONTEXT *context, INT xpos, INT ypos,
                                      GX_PIXELMAP *pixelmap, GX_UBYTE alpha);
VOID _gx_dave2d_polygon_draw(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_polygon_fill(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_block_move(GX_DRAW_CONTEXT *context,
                          GX_RECTANGLE *block, INT xshift, INT yshift);
VOID _gx_dave2d_alphamap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_compressed_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_buffer_toggle(GX_CANVAS *canvas, GX_RECTANGLE *dirty);
#if defined(GX_ARC_DRAWING_SUPPORT)
VOID _gx_dave2d_aliased_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_pie_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
#endif
VOID _gx_synergy_jpeg_draw (GX_DRAW_CONTEXT *p_context, INT x, INT y, GX_PIXELMAP *p_pixelmap);

#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT FeatureSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PerformanceSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MoreSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MinimumDriveScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT UserSelectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ResetScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT ResetFinishScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT Template_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT VeerAdjust_Screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID VeerAdjust_Screen_draw_function(GX_WINDOW *widget);
UINT VeerSlider_event_function(GX_PIXELMAP_SLIDER *widget, GX_EVENT *event_ptr);
VOID Slider_Draw_Function(GX_PIXELMAP_SLIDER *widget);
UINT OON_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID OON_Screen_draw_function(GX_WINDOW *widget);
UINT DiagnosticScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID DiagnosticScreen_draw_event(GX_WINDOW *widget);
UINT Ready_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Ready_Screen_draw_function(GX_WINDOW *widget);
UINT StartupSplashScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID StartupSplashScreen_draw_function(GX_WINDOW *widget);
UINT CalibrationScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID CalibrationScreen_draw(GX_WINDOW *widget);
UINT SetPadTypeScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SetPadTypeScreen_Draw_Function(GX_WINDOW *widget);
UINT UserSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT PadOptionsSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SetPadDirectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SetPadDirectionScreen_draw_function(GX_WINDOW *widget);
UINT HHP_Start_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT MainUserScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID MainUserScreen_draw_function(GX_WINDOW *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_checkbox_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), USHORT language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
