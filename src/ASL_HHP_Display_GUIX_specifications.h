/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.4.2.9                                               */
/*  Date (dd.mm.yyyy): 10.12.2019   Time (hh:mm): 05:36                        */
/*******************************************************************************/


#ifndef _ASL_HHP_DISPLAY_GUIX_SPECIFICATIONS_H_
#define _ASL_HHP_DISPLAY_GUIX_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define CENTER_PAD_DIGITAL_BTN_ID 1
#define INSTRUCT_PROMPT_ID 2
#define LEFT_PAD_DIGITAL_BTN_ID 3
#define OK_BTN_ID 4
#define RIGHT_PAD_DIGITAL_BTN_ID 5
#define CENTER_PAD_PROP_BTN_ID 6
#define LEFT_PAD_PROP_BTN_ID 7
#define RIGHT_PAD_PROP_BTN_ID 8
#define CENTER_PAD_OFF_BTN_ID 9
#define LEFT_PAD_OFF_BTN_ID 10
#define RIGHT_PAD_OFF_BTN_ID 11
#define LEFT_PAD_RAW_VALUE_PROMPT 12
#define RIGHT_PAD_RAW_VALUE_PROMPT 13
#define CENTER_PAD_RAW_VALUE_PROMPT 14
#define LEFT_PAD_ADJUSTED_PROMPT 15
#define RIGHT_PAD_ADJUSTED_PROMPT 16
#define CENTER_PAD_ADJUSTED_PROMPT 17
#define READY_SCREEN_ID 18
#define POWER_LARGE_ORANGE_PROMPT_ID 19
#define PRESS_SWITCH_PROMPT_ID 20
#define STARTUP_SPLASH_SCREEN_ID 21
#define STATUS_PROMPT_ID 22
#define HB_OK_ID 23
#define HB_TIMEOUT_ID 24
#define POWER_OFF_ID 25
#define POWER_ON_ID 26
#define CENTER_PAD_ON_BTN_ID 27
#define MINIMUM_INSTRUCT_PROMPT_ID 28
#define LEFT_PAD_ON_BTN_ID 29
#define RIGHT_PAD_ON_BTN_ID 30
#define MAXIMUM_INSTRUCT_PROMPT_ID 31
#define VALUE_PROMPT_ID 32
#define PAD_VALUE_PROMPT_ID 33
#define CENTER_PAD_PROPORTIONAL_BTN_ID 34
#define LEFT_PAD_PROPORTIONAL_BTN_ID 35
#define RIGHT_PAD_PROPORTIONAL_BTN_ID 36
#define SETTING_PROMPT01_ID 37
#define CLICKS_BTN_ID 38
#define CLICKS_PROMPT_ID 39
#define CLICKS_ACTIVE_ICON 40
#define CLICKS_INACTIVE_ICON 41
#define TIMER_OFF_BTN_ID 42
#define TIMER_10_BTN_ID 43
#define TIMER_15_BTN_ID 44
#define TIMER_20_BTN_ID 45
#define TIMER_25_BTN_ID 46
#define TIMER_30_BTN_ID 47
#define TIMER_40_BTN_ID 48
#define TIMER_50_BTN_ID 49
#define POWER_BTN_ID 50
#define POWER_PROMPT_ID 51
#define POWER_ACTIVE_ICON 52
#define POWER_INACTIVE_ICON 53
#define BLUETOOTH_PROMPT_ID 54
#define BLUETOOTH_BTN_ID 55
#define BLUETOOTH_ACTIVE_ICON 56
#define BLUETOOTH_INACTIVE_ICON 57
#define NEXT_FUNCTION_PROMPT_ID 58
#define NEXT_FUNCTION_BTN_ID 59
#define NEXT_FUNCTION_ACTIVE_ICON 60
#define NEXT_FUNCTION_INACTIVE_ICON 61
#define NEXT_PROFILE_PROMPT_ID 62
#define NEXT_PROFILE_BTN_ID 63
#define NEXT_PROFILE_ACTIVE_ICON 64
#define NEXT_PROFILE_INACTIVE_ICON 65
#define GOTO_PAD_TYPE_BTN_ID 66
#define GOTO_PAD_DIRECTIONS_BTN_ID 67
#define GOTO_PAD_SETTINGS_BTN_ID 68
#define GOTO_USER_SETTINGS_BTN_ID 69
#define FEATURES_SETTINGS_BTN_ID 70
#define CENTER_PAD_FORWARD_ARROW_BTN_ID 71
#define LEFT_PAD_LEFT_ARROW_BTN_ID 72
#define RIGHT_PAD_RIGHT_ARROW_BTN_ID 73
#define LEFT_PAD_RIGHT_ARROW_BTN_ID 74
#define LEFT_PAD_FORWARD_ARROW_BTN_ID 75
#define RIGHT_PAD_LEFT_ARROW_BTN_ID 76
#define RIGHT_PAD_FORWARD_ARROW_BTN_ID 77
#define CENTER_PAD_LEFT_ARROW_BTN_ID 78
#define CENTER_PAD_RIGHT_ARROW_BTN_ID 79
#define CENTER_PAD_QUESTION_BTN_ID 80
#define LEFT_PAD_QUESTION_BTN_ID 81
#define RIGHT_PAD_QUESTION_BTN_ID 82
#define DIAGNOSTIC_BTN_ID 83
#define SETTINGS_BTN_ID 84
#define VERSION_PROMPT_ID 85
#define HEAD_ARRAY_VERSION_PROMPT_ID 86
#define MAIN_USER_SCREEN_ID 87
#define RIGHT_PAD_OFF_ID 88
#define PROFILE_NEXT_SMALL_PROMPT_ID 89
#define PROFILE_NEXT_LARGE_PROMPT_ID 90
#define POWER_SMALL_PROMPT_ID 91
#define POWER_LARGE_PROMPT_ID 92
#define FUNCTION_NEXT_SMALL_PROMPT_ID 93
#define FUNCITON_NET_LARGE_PROMPT_ID 94
#define CENTER_PAD_ON_ID 95
#define BLUETOOTH_LARGE_PROMPT_ID 96
#define BLUETOOTH_SMALL_PROMPT_ID 97
#define UP_ARROW_BTN_ID 98
#define DOWN_ARROW_BTN_ID 99
#define BOTH_ARROW_BTN_ID 100


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct DIAGNOSTICSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadDigital_Button;
    GX_PROMPT DiagnosticScreen_InstructionsText;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadDigital_Button;
    GX_TEXT_BUTTON DiagnosticScreen_OK_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadProp_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_CenterPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_LeftPadOff_Button;
    GX_PIXELMAP_BUTTON DiagnosticScreen_RightPadOff_Button;
    GX_PROMPT DiagnosticScreen_LeftPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_RawValue_Prompt;
    GX_PROMPT DiagnosticScreen_LeftPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_RightPad_Adjusted_Prompt;
    GX_PROMPT DiagnosticScreen_CenterPad_Adjusted_Prompt;
} DIAGNOSTICSCREEN_CONTROL_BLOCK;

typedef struct READYSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT ReadyScreen_PowerLargeOrangePrompt;
    GX_PROMPT ReadyScreen_PressSwitchPrompt;
} READYSCREEN_CONTROL_BLOCK;

typedef struct STARTUPSPLASHSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON StartupSplashScreen_pixelmap_button;
    GX_PROMPT StartupSplashScreen_StatusPrompt;
    GX_BUTTON StartupSplashScreen_HB_OK_Button;
    GX_BUTTON StartupSplashScreen_HB_TimeoutButton;
    GX_BUTTON StartupSplashScreen_PowerOffButton;
    GX_BUTTON StartupSplashScreen_PowerOnButton;
} STARTUPSPLASHSCREEN_CONTROL_BLOCK;

typedef struct PADCALIBRATIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON PadCalibrationScreen_CenterPadON_Button;
    GX_PROMPT PadCalibrationScreen_MinimumInstructionsText;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_LeftPadON_Button;
    GX_TEXT_BUTTON PadCalibrationScreen_OK_Button;
    GX_PIXELMAP_BUTTON PadCalibrationScreen_RightPadON_Button;
    GX_PROMPT PadCalibrationScreen_MaximumInstructionsText;
    GX_NUMERIC_PROMPT PadCalibrationScreen_Value_Prompt;
    GX_NUMERIC_PROMPT PadCalibrationScreen_PadValue_Prompt;
} PADCALIBRATIONSCREEN_CONTROL_BLOCK;

typedef struct SETPADTYPESCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_CenterPadProportional_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_LeftPadProportional_Button;
    GX_TEXT_BUTTON SetPadTypeScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadDigital_Button;
    GX_PIXELMAP_BUTTON SetPadTypeScreen_RightPadProportional_Button;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt;
    GX_PROMPT SetPadTypeScreen_SettingPadPrompt_1;
} SETPADTYPESCREEN_CONTROL_BLOCK;

typedef struct USERSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON UserSettingsScreen_ClicksButtonBackground;
    GX_PROMPT UserSettingsScreen_Clicks_Prompt;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Clicks_ActiveIcon;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Clicks_InactiveIcon;
    GX_TEXT_BUTTON UserSettingsScreen_OK_Button;
    GX_PROMPT UserSettingsScreen_Tmeout_Prompt;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_Off_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_10_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_15_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_20_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_25_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_30_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_40_Button;
    GX_PIXELMAP_BUTTON UserSettingsScreen_Timer_50_Button;
} USERSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct FEATURESETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_PowerButtonBackground;
    GX_PROMPT FeatureSettingsScreen_PowerPrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_Power_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_Power_InactiveIcon;
    GX_PROMPT FeatureSettingsScreen_BluetoothPrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_BluetoothButtonBackground;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_Bluetooth_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_Bluetooth_InactiveIcon;
    GX_PROMPT FeatureSettingsScreen_NextFunctionPrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_NextFunctionButtonBackground;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_NextFunction_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_NextFunction_InactiveIcon;
    GX_PROMPT FeatureSettingsScreen_NextProfilePrompt;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_NextProfileButtonBackground;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_NextProfile_ActiveIcon;
    GX_PIXELMAP_BUTTON FeatureSettingsScreen_NextProfile_InactiveIcon;
    GX_TEXT_BUTTON FeatureSettingsScreen_OK_Button;
} FEATURESETTINGSSCREEN_CONTROL_BLOCK;

typedef struct PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON PadOptionsSettingsScreen_GotoPadSettings_Button;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_GotoUserSettings_lButton;
    GX_TEXT_BUTTON PadOptionsSettingsScreen_OK_Button;
} PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK;

typedef struct SETTINGSSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON SettingsScreen_GotoPadSettings_Button;
    GX_TEXT_BUTTON SettingsScreen_GotoUserSettings_lButton;
    GX_TEXT_BUTTON SettingsScreen_OK_Button;
    GX_TEXT_BUTTON SettingsScreen_FeaturesSettings_Button;
} SETTINGSSCREEN_CONTROL_BLOCK;

typedef struct SETPADDIRECTIONSCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_LeftArrow_Button;
    GX_TEXT_BUTTON SetPadDirectionScreen_OK_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_RightArrow_Button;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt;
    GX_PROMPT SetPadDirectionScreen_SettingPadPrompt_1;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_ForwardArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_LeftArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_RightArrow_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_Off_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_CenterPad_Question_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_LeftPad_Question_Button;
    GX_PIXELMAP_BUTTON SetPadDirectionScreen_RightPad_Question_Button;
} SETPADDIRECTIONSCREEN_CONTROL_BLOCK;

typedef struct HHP_START_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON HHP_Start_Screen_Diagnostic_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_Settings_Button;
    GX_TEXT_BUTTON HHP_Start_Screen_OK_Button;
    GX_PROMPT HHP_Start_Screen_Version_Prompt;
    GX_PROMPT HHP_Start_Screen_HeadArray_Version_Prompt;
} HHP_START_SCREEN_CONTROL_BLOCK;

typedef struct MAIN_USER_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT Main_User_Screen_RightPadOFF;
    GX_PIXELMAP_PROMPT Main_User_Screen_ProfileNextSmallPrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_ProfileNextLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_PowerSmallPrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_PowerLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_FunctionNextSmallPrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_FunctionNextLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_CenterPadON;
    GX_PIXELMAP_PROMPT Main_User_Screen_BluetoothLargePrompt;
    GX_PIXELMAP_PROMPT Main_User_Screen_BluetoothSmallPrompt;
    GX_TEXT_BUTTON Main_User_Screen_UpArrowBtn;
    GX_TEXT_BUTTON Main_User_Screen_DownArrowBtn;
    GX_TEXT_BUTTON Main_User_Screen_BothButton;
} MAIN_USER_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern DIAGNOSTICSCREEN_CONTROL_BLOCK DiagnosticScreen;
extern READYSCREEN_CONTROL_BLOCK ReadyScreen;
extern STARTUPSPLASHSCREEN_CONTROL_BLOCK StartupSplashScreen;
extern PADCALIBRATIONSCREEN_CONTROL_BLOCK PadCalibrationScreen;
extern SETPADTYPESCREEN_CONTROL_BLOCK SetPadTypeScreen;
extern USERSETTINGSSCREEN_CONTROL_BLOCK UserSettingsScreen;
extern FEATURESETTINGSSCREEN_CONTROL_BLOCK FeatureSettingsScreen;
extern PADOPTIONSSETTINGSSCREEN_CONTROL_BLOCK PadOptionsSettingsScreen;
extern SETTINGSSCREEN_CONTROL_BLOCK SettingsScreen;
extern SETPADDIRECTIONSCREEN_CONTROL_BLOCK SetPadDirectionScreen;
extern HHP_START_SCREEN_CONTROL_BLOCK HHP_Start_Screen;
extern MAIN_USER_SCREEN_CONTROL_BLOCK Main_User_Screen;
#endif

/* Prototype Synergy display driver specific functions                         */

UINT _gx_synergy_display_driver_setup(GX_DISPLAY *display);
#if defined(GX_TARGET_WIN32) || defined(GX_TARGET_LINUX)
UINT win32_synergy_graphics_driver_setup_565rgb(GX_DISPLAY *display);
#else
VOID _gx_display_driver_565rgb_setup(GX_DISPLAY *display, VOID *aux_data,
                           VOID (*toggle_function)(struct GX_CANVAS_STRUCT *canvas,
                           GX_RECTANGLE *dirty_area));
VOID _gx_dave2d_horizontal_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT xstart, INT xend, INT ypos);
VOID _gx_dave2d_vertical_pattern_line_draw_565(GX_DRAW_CONTEXT *context, INT ystart, INT yend, INT xpos);
VOID _gx_dave2d_pixel_write_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR color);
VOID _gx_dave2d_pixel_blend_565(GX_DRAW_CONTEXT *context, INT x, INT y, GX_COLOR fcolor, GX_UBYTE alpha);
VOID _gx_dave2d_pixelmap_rotate_16bpp(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap, INT angle, INT rot_cx, INT rot_cy);
VOID _gx_dave2d_drawing_initiate(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_drawing_complete(GX_DISPLAY *display, GX_CANVAS *canvas);
VOID _gx_dave2d_horizontal_line(GX_DRAW_CONTEXT *context,
                             INT xstart, INT xend, INT ypos, INT width, GX_COLOR color);
VOID _gx_dave2d_vertical_line(GX_DRAW_CONTEXT *context,
                             INT ystart, INT yend, INT xpos, INT width, GX_COLOR color);
VOID _gx_dave2d_canvas_copy(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_canvas_blend(GX_CANVAS *canvas, GX_CANVAS *composite);
VOID _gx_dave2d_simple_line_draw(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_simple_wide_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart,
                                INT xend, INT yend);
VOID _gx_dave2d_aliased_line(GX_DRAW_CONTEXT *context, INT xstart, INT ystart, INT xend, INT yend);
VOID _gx_dave2d_aliased_wide_line(GX_DRAW_CONTEXT *context, INT xstart,
                                        INT ystart, INT xend, INT yend);
VOID _gx_dave2d_pixelmap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_horizontal_pixelmap_line_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, INT xstart, INT xend, INT y, GX_FILL_PIXELMAP_INFO *info);
VOID _gx_dave2d_pixelmap_blend(GX_DRAW_CONTEXT *context, INT xpos, INT ypos,
                                      GX_PIXELMAP *pixelmap, GX_UBYTE alpha);
VOID _gx_dave2d_polygon_draw(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_polygon_fill(GX_DRAW_CONTEXT *context, GX_POINT *vertex, INT num);
VOID _gx_dave2d_block_move(GX_DRAW_CONTEXT *context,
                          GX_RECTANGLE *block, INT xshift, INT yshift);
VOID _gx_dave2d_alphamap_draw(GX_DRAW_CONTEXT *context, INT xpos, INT ypos, GX_PIXELMAP *pixelmap);
VOID _gx_dave2d_compressed_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_8bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_4bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_compressed_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_raw_glyph_1bit_draw(GX_DRAW_CONTEXT *context, GX_RECTANGLE *draw_area, GX_POINT *map_offset, const GX_GLYPH *glyph);
VOID _gx_dave2d_buffer_toggle(GX_CANVAS *canvas, GX_RECTANGLE *dirty);
#if defined(GX_ARC_DRAWING_SUPPORT)
VOID _gx_dave2d_aliased_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_circle_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r);
VOID _gx_dave2d_pie_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_arc_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, UINT r, INT start_angle, INT end_angle);
VOID _gx_dave2d_aliased_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_draw(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
VOID _gx_dave2d_ellipse_fill(GX_DRAW_CONTEXT *context, INT xcenter, INT ycenter, INT a, INT b);
#endif
VOID _gx_synergy_jpeg_draw (GX_DRAW_CONTEXT *p_context, INT x, INT y, GX_PIXELMAP *p_pixelmap);

#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT DiagnosticScreen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID DiagnosticScreen_draw_event(GX_WINDOW *widget);
UINT Ready_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Ready_Screen_draw_function(GX_WINDOW *widget);
UINT StartupSplashScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID StartupSplashScreen_draw_function(GX_WINDOW *widget);
UINT CalibrationScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID CalibrationScreen_draw(GX_WINDOW *widget);
UINT SetPadTypeScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SetPadTypeScreen_Draw_Function(GX_WINDOW *widget);
UINT UserSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT FeatureSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID FeatureSettingsScreen_draw_function(GX_WINDOW *widget);
UINT PadOptionsSettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SettingsScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT SetPadDirectionScreen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SetPadDirectionScreen_draw_function(GX_WINDOW *widget);
UINT HHP_Start_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT Main_User_Screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Main_User_Screen_draw_function(GX_WINDOW *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), USHORT language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
